// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package orders is a generated GoMock package.
package orders

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kamencov/go-musthave-diploma-tpl/internal/models"
	db "github.com/kamencov/go-musthave-diploma-tpl/internal/storage/db"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetAllOrders mocks base method.
func (m *MockStorage) GetAllOrders() ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockStorageMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockStorage)(nil).GetAllOrders))
}

// GetAllUserOrders mocks base method.
func (m *MockStorage) GetAllUserOrders(login string) ([]*models.OrdersUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserOrders", login)
	ret0, _ := ret[0].([]*models.OrdersUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserOrders indicates an expected call of GetAllUserOrders.
func (mr *MockStorageMockRecorder) GetAllUserOrders(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserOrders", reflect.TypeOf((*MockStorage)(nil).GetAllUserOrders), login)
}

// GetBalanceUser mocks base method.
func (m *MockStorage) GetBalanceUser(login string) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceUser", login)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceUser indicates an expected call of GetBalanceUser.
func (mr *MockStorageMockRecorder) GetBalanceUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceUser", reflect.TypeOf((*MockStorage)(nil).GetBalanceUser), login)
}

// GetLoginID mocks base method.
func (m *MockStorage) GetLoginID(login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginID", login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginID indicates an expected call of GetLoginID.
func (mr *MockStorageMockRecorder) GetLoginID(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginID", reflect.TypeOf((*MockStorage)(nil).GetLoginID), login)
}

// GetLoyalty mocks base method.
func (m *MockStorage) GetLoyalty(order string) (models.Loyalty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoyalty", order)
	ret0, _ := ret[0].(models.Loyalty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoyalty indicates an expected call of GetLoyalty.
func (mr *MockStorageMockRecorder) GetLoyalty(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoyalty", reflect.TypeOf((*MockStorage)(nil).GetLoyalty), order)
}

// GetSumBonus mocks base method.
func (m *MockStorage) GetSumBonus(userID int) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumBonus", userID)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumBonus indicates an expected call of GetSumBonus.
func (mr *MockStorageMockRecorder) GetSumBonus(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumBonus", reflect.TypeOf((*MockStorage)(nil).GetSumBonus), userID)
}

// GetWithdrawals mocks base method.
func (m *MockStorage) GetWithdrawals(login string) ([]*models.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", login)
	ret0, _ := ret[0].([]*models.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockStorageMockRecorder) GetWithdrawals(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockStorage)(nil).GetWithdrawals), login)
}

// SaveNewStatusAndBonus mocks base method.
func (m *MockStorage) SaveNewStatusAndBonus(accrual models.ResponseAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewStatusAndBonus", accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewStatusAndBonus indicates an expected call of SaveNewStatusAndBonus.
func (mr *MockStorageMockRecorder) SaveNewStatusAndBonus(accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewStatusAndBonus", reflect.TypeOf((*MockStorage)(nil).SaveNewStatusAndBonus), accrual)
}

// SaveOrder mocks base method.
func (m *MockStorage) SaveOrder(userID int, orderID, orderStatus string, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", userID, orderID, orderStatus, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockStorageMockRecorder) SaveOrder(userID, orderID, orderStatus, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockStorage)(nil).SaveOrder), userID, orderID, orderStatus, now)
}

// UpdateOrder mocks base method.
func (m *MockStorage) UpdateOrder(order string, sum float32, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order, sum, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageMockRecorder) UpdateOrder(order, sum, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorage)(nil).UpdateOrder), order, sum, now)
}
