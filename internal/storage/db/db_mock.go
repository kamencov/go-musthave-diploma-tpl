// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	logger "github.com/kamencov/go-musthave-diploma-tpl/internal/logger"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// initDB mocks base method.
func (m *MockDB) initDB(logs *logger.Logger, dataSourceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initDB", logs, dataSourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// initDB indicates an expected call of initDB.
func (mr *MockDBMockRecorder) initDB(logs, dataSourceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initDB", reflect.TypeOf((*MockDB)(nil).initDB), logs, dataSourceName)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CheckTableUserLogin mocks base method.
func (m *MockUser) CheckTableUserLogin(login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTableUserLogin", login)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTableUserLogin indicates an expected call of CheckTableUserLogin.
func (mr *MockUserMockRecorder) CheckTableUserLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTableUserLogin", reflect.TypeOf((*MockUser)(nil).CheckTableUserLogin), login)
}

// CheckTableUserPassword mocks base method.
func (m *MockUser) CheckTableUserPassword(login string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTableUserPassword", login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckTableUserPassword indicates an expected call of CheckTableUserPassword.
func (mr *MockUserMockRecorder) CheckTableUserPassword(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTableUserPassword", reflect.TypeOf((*MockUser)(nil).CheckTableUserPassword), login)
}

// GetLoginID mocks base method.
func (m *MockUser) GetLoginID(login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginID", login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginID indicates an expected call of GetLoginID.
func (mr *MockUserMockRecorder) GetLoginID(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginID", reflect.TypeOf((*MockUser)(nil).GetLoginID), login)
}

// SaveTableUserAndUpdateToken mocks base method.
func (m *MockUser) SaveTableUserAndUpdateToken(login, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTableUserAndUpdateToken", login, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTableUserAndUpdateToken indicates an expected call of SaveTableUserAndUpdateToken.
func (mr *MockUserMockRecorder) SaveTableUserAndUpdateToken(login, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTableUserAndUpdateToken", reflect.TypeOf((*MockUser)(nil).SaveTableUserAndUpdateToken), login, accessToken)
}

// SearchLoginByToken mocks base method.
func (m *MockUser) SearchLoginByToken(accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchLoginByToken", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchLoginByToken indicates an expected call of SearchLoginByToken.
func (mr *MockUserMockRecorder) SearchLoginByToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchLoginByToken", reflect.TypeOf((*MockUser)(nil).SearchLoginByToken), accessToken)
}
