// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kamencov/go-musthave-diploma-tpl/internal/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CheckTableUserLogin mocks base method.
func (m *MockStorage) CheckTableUserLogin(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTableUserLogin", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTableUserLogin indicates an expected call of CheckTableUserLogin.
func (mr *MockStorageMockRecorder) CheckTableUserLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTableUserLogin", reflect.TypeOf((*MockStorage)(nil).CheckTableUserLogin), ctx, login)
}

// CheckTableUserPassword mocks base method.
func (m *MockStorage) CheckTableUserPassword(ctx context.Context, password string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTableUserPassword", ctx, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckTableUserPassword indicates an expected call of CheckTableUserPassword.
func (mr *MockStorageMockRecorder) CheckTableUserPassword(ctx, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTableUserPassword", reflect.TypeOf((*MockStorage)(nil).CheckTableUserPassword), ctx, password)
}

// CheckWriteOffOfFunds mocks base method.
func (m *MockStorage) CheckWriteOffOfFunds(ctx context.Context, order string, sum float64, now time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWriteOffOfFunds", ctx, order, sum, now)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckWriteOffOfFunds indicates an expected call of CheckWriteOffOfFunds.
func (mr *MockStorageMockRecorder) CheckWriteOffOfFunds(ctx, order, sum, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWriteOffOfFunds", reflect.TypeOf((*MockStorage)(nil).CheckWriteOffOfFunds), ctx, order, sum, now)
}

// Get mocks base method.
func (m *MockStorage) Get(query string, args ...interface{}) (*sql.Row, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), varargs...)
}

// GetAllUserOrders mocks base method.
func (m *MockStorage) GetAllUserOrders(login string) ([]*models.OrdersUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserOrders", login)
	ret0, _ := ret[0].([]*models.OrdersUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserOrders indicates an expected call of GetAllUserOrders.
func (mr *MockStorageMockRecorder) GetAllUserOrders(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserOrders", reflect.TypeOf((*MockStorage)(nil).GetAllUserOrders), login)
}

// GetBalanceUser mocks base method.
func (m *MockStorage) GetBalanceUser(login string) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceUser", login)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceUser indicates an expected call of GetBalanceUser.
func (mr *MockStorageMockRecorder) GetBalanceUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceUser", reflect.TypeOf((*MockStorage)(nil).GetBalanceUser), login)
}

// GetUserByAccessToken mocks base method.
func (m *MockStorage) GetUserByAccessToken(order, login string, now time.Time, addressAccrual string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAccessToken", order, login, now, addressAccrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserByAccessToken indicates an expected call of GetUserByAccessToken.
func (mr *MockStorageMockRecorder) GetUserByAccessToken(order, login, now, addressAccrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccessToken", reflect.TypeOf((*MockStorage)(nil).GetUserByAccessToken), order, login, now, addressAccrual)
}

// GetWithdrawals mocks base method.
func (m *MockStorage) GetWithdrawals(ctx context.Context, login string) ([]*models.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, login)
	ret0, _ := ret[0].([]*models.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockStorageMockRecorder) GetWithdrawals(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockStorage)(nil).GetWithdrawals), ctx, login)
}

// Save mocks base method.
func (m *MockStorage) Save(query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), varargs...)
}

// SaveTableUser mocks base method.
func (m *MockStorage) SaveTableUser(login, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTableUser", login, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTableUser indicates an expected call of SaveTableUser.
func (mr *MockStorageMockRecorder) SaveTableUser(login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTableUser", reflect.TypeOf((*MockStorage)(nil).SaveTableUser), login, passwordHash)
}

// SaveTableUserAndUpdateToken mocks base method.
func (m *MockStorage) SaveTableUserAndUpdateToken(login, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTableUserAndUpdateToken", login, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTableUserAndUpdateToken indicates an expected call of SaveTableUserAndUpdateToken.
func (mr *MockStorageMockRecorder) SaveTableUserAndUpdateToken(login, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTableUserAndUpdateToken", reflect.TypeOf((*MockStorage)(nil).SaveTableUserAndUpdateToken), login, accessToken)
}
